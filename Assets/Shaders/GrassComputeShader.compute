#pragma kernel GenerateGrassBlades

struct GrassBlade {
    float3 position;
    float3 scale;
    float3 rotation;
};

float CellSize = 0.16;
int GridSize = 80;

RWStructuredBuffer<GrassBlade> grassBlades;

float rand(float seed);

[numthreads(128, 1, 1)]
void GenerateGrassBlades (uint3 id : SV_DispatchThreadID) {
    
    float gridOffset = (GridSize * CellSize) * 0.5;
    int totalCells = GridSize * GridSize;

    if (id.x < totalCells) {
        int cellX = id.x % GridSize;
        int cellZ = id.x / GridSize;
        
        GrassBlade blade;
        blade.position = float3(
            cellX * CellSize + rand(id.x + 3) * CellSize - gridOffset,
            0, 
            cellZ * CellSize + rand(id.x + 4) * CellSize - gridOffset
            );
        blade.scale = float3(1, 1, 1);
        blade.rotation = float3(0, rand(id.x + 2) * 360.0, 0);
        grassBlades[id.x] = blade;
    }
}

float rand(float seed) {
    return frac(sin(seed) * 43758.5453);
}
